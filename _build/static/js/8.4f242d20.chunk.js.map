{"version":3,"sources":["main/content/apps/contacts/ContactsList.js","main/content/apps/contacts/ContactsHeader.js","main/content/apps/contacts/ContactsSidebarContent.js","main/content/apps/contacts/ContactDialog.js","main/content/apps/contacts/ContactsApp.js"],"names":["ContactsList","state","selectedContactsMenu","isOpen","chatDetail","individualchatDetail","chatUser","chatId","currentSeletedchatId","selectedUserDetail","contacts","user","currentRoom","getFilteredArray","entities","searchText","arr","Object","keys","map","id","length","FuseUtils","filterArrayByString","openSelectedContactMenu","event","_this","setState","currentTarget","closeSelectedContactsMenu","openChat","toggleChat","getMsgInfo","userId","userInfo","messages","chatlist","chatList","console","log","item","this","props","nextProps","prevProps","prevState","snapshot","_this2","msg","rooms","index","individualcurrentChat","_this3","_this$props","classes","selectedContactIds","selectAllContacts","deSelectAllContacts","toggleInSelectedContacts","removeContacts","removeContact","toggleStarredContact","setContactsUnstarred","setContactsStarred","data","react_default","a","createElement","_fuse","animation","delay","react_table_es","className","classNames","root","getTrProps","rowInfo","column","onClick","e","stopPropagation","original","name","columns","Header","index_es","onChange","target","checked","indeterminate","accessor","Cell","row","includes","value","sortable","width","Fragment","aria-owns","aria-haspopup","anchorEl","open","Boolean","onClose","icon","inset","primary","alt","src","filterable","ev","chatIcon","starred","defaultPageSize","noDataText","color","variant","Component","withStyles","theme","mailList","padding","mailItem","avatar","backgroundColor","palette","labels","individualChat","position","bottom","right","zIndex","display","withTheme","withRouter","connect","_ref","contactsApp","chatPanel","selectedContactId","chat","dispatch","bindActionCreators","getContacts","Actions","getUserData","openEditContactDialog","toggleStarredContacts","ChatActions","openChatPanel","closeChatPanel","ContactsHeader","setSearchText","pageLayout","lgUp","toggleLeftSidebar","aria-label","styles","FuseSelectedTheme","elevation","placeholder","disableUnderline","fullWidth","inputProps","ContactsSidebarContent","button","component","NavLink","to","activeClassName","listItem","disableTypography","textDecoration","height","borderRadius","paddingLeft","paddingRight","&.active","secondary","main","contrastText","pointerEvents","& .list-item-icon","newContactState","lastName","nickname","company","jobTitle","email","phone","address","birthday","notes","ContactDialog","handleChange","_","set","objectSpread","type","closeComposeDialog","contactDialog","closeEditContactDialog","closeNewContactDialog","isEqual","addContact","updateContact","assign","paper","maxWidth","formControl","label","autoFocus","required","InputLabelProps","shrink","multiline","rows","disabled","canBeSubmitted","marginBottom","ContactsApp","match","params","location","openNewContactDialog","contentCardWrapper","leftSidebar","header","contacts_ContactsHeader","content","contacts_ContactsList","leftSidebarContent","contacts_ContactsSidebarContent","sidebarInner","onRef","instance","innerScroll","addButton","contacts_ContactDialog","left"],"mappings":"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","file":"static/js/8.4f242d20.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {FuseUtils, FuseAnimate} from '@fuse';\r\nimport {Avatar, Checkbox, Icon, IconButton, ListItemIcon, ListItemText, Menu, MenuItem, MenuList, Typography} from '@material-ui/core';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as Actions from './store/actions';\r\nimport * as ChatActions from '../../../chatPanel/store/actions';\r\nimport ReactTable from \"react-table\";\r\nimport classNames from 'classnames';\r\n\r\n// import withReducer from 'store/withReducer';\r\n// import reducer from './store/reducers';\r\nimport IndividualChat from '../../../chatPanel/individualChat';\r\nimport \"../../../chatPanel/individualChat.css\";\r\n\r\nconst styles = theme => ({\r\n    mailList: {\r\n        padding: 0\r\n    },\r\n    mailItem: {},\r\n    avatar  : {\r\n        backgroundColor: theme.palette.primary[500]\r\n    },\r\n    labels  : {},\r\n    chatIcon : {\r\n        padding: 8\r\n    },\r\n    individualChat: {\r\n        position: 'fixed',\r\n        bottom: 70,\r\n        right: 360,\r\n        zIndex: 10,\r\n        display: 'flex'\r\n    }\r\n\r\n});\r\n\r\nclass ContactsList extends Component {\r\n\r\n    state = {\r\n        selectedContactsMenu   : null,\r\n        isOpen                 : true,\r\n        chatDetail             : null,\r\n        individualchatDetail   : null,\r\n        chatUser               : null,\r\n        chatId                 : null,\r\n        currentSeletedchatId   : null,\r\n        selectedUserDetail     : null,\r\n        contacts               : null,\r\n        user                   : null,\r\n        currentRoom            : null,\r\n    };\r\n    componentWillMount(){\r\n        this.setState({\r\n            chatDetail: this.props.chatDetail,\r\n            chatUser  : this.props.chatUser,\r\n            contacts  : this.props.contacts,\r\n            // currentRoom: this.props.chatDetail.currentRoom,\r\n        });\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        if(nextProps.chatDetail && nextProps.chatUser) {\r\n            // console.log('chatDetail', nextProps.chatDetail)\r\n            this.setState({\r\n                chatDetail: nextProps.chatDetail,\r\n                chatUser  : nextProps.chatUser,\r\n                user      : nextProps.chatUser,\r\n                contacts  : nextProps.contacts,\r\n                // currentRoom: nextProps.chatDetail.currentRoom,\r\n            });\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot){\r\n        if(this.props.chatDetail!==prevProps.chatDetail){\r\n            this.setState({\r\n                chatDetail: this.props.chatDetail,\r\n            });\r\n        }\r\n        if(this.props.chatUser!==prevProps.chatUser){\r\n            this.setState({\r\n                chatUser  : this.props.chatUser,\r\n                user      : this.props.chatUser,\r\n                contacts  : this.props.contacts,\r\n            });\r\n        }\r\n        if(this.props.chatDetail.currentRoom !== prevProps.chatDetail.currentRoom){\r\n            // this.setState({\r\n            //     currentRoom: this.props.chatDetail.currentRoom,\r\n            // });\r\n        }\r\n        if(this.props.chatUser.chatList !== prevProps.chatUser.chatList && this.state.currentSeletedchatId && this.state.currentSeletedchatId!=null){\r\n            this.props.chatUser.chatList.map((item)=>{\r\n                if(item['contactId']==this.state.currentSeletedchatId){\r\n                    this.setState({\r\n                        chatId : item['chatId'],\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        if(!this.state.isOpen && this.state.chatId && this.state.chatId !==null){\r\n            this.openChat();\r\n            // console.log(\"chatID=============\",this.state.chatId);\r\n        }\r\n        if(this.props !== prevProps && this.state.chatId && this.state.chatId !== null){\r\n                let msg = this.state.chatDetail.messages;\r\n                this.setState({\r\n                    individualchatDetail:msg[this.state.chatId],\r\n                })\r\n        }\r\n        // console.log(\"==1==rooms\",this.state.chatDetail.rooms);\r\n        // console.log(\"==1==chatID\",this.state.chatId);\r\n        // console.log(\"==1==currentRoom\",this.state.currentRoom);\r\n        if(this.state.currentRoom == null || this.state.chatId != prevState.chatId){\r\n                this.state.chatDetail.rooms.map((item, index)=>{\r\n                   if(item.id === this.state.chatId){\r\n                       if(this.state.currentRoom !==item){\r\n                           this.setState({\r\n                               currentRoom:item,\r\n                           });\r\n                           this.props.individualcurrentChat(item);\r\n                       }\r\n                   }\r\n                });\r\n        }\r\n\r\n    }\r\n    getFilteredArray = (entities, searchText) => {\r\n        const arr = Object.keys(entities).map((id) => entities[id]);\r\n        if ( searchText.length === 0 )\r\n        {\r\n            return arr;\r\n        }\r\n        return FuseUtils.filterArrayByString(arr, searchText);\r\n    };\r\n\r\n    openSelectedContactMenu = (event) => {\r\n        this.setState({selectedContactsMenu: event.currentTarget});\r\n    };\r\n\r\n    closeSelectedContactsMenu = () => {\r\n        this.setState({selectedContactsMenu: null});\r\n    };\r\n    openChat = () => {\r\n        if(!this.state.isOpen)\r\n            this.setState({\r\n                isOpen: !this.state.isOpen\r\n            });\r\n    };\r\n    toggleChat = () => {\r\n        if(!this.state.isOpen)\r\n            this.setState({\r\n                isOpen: !this.state.isOpen\r\n            });\r\n    };\r\n    getMsgInfo=(userId,userInfo)=>{\r\n        if(userId && userId !=null){\r\n            this.setState({\r\n                currentSeletedchatId: userId,\r\n                selectedUserDetail  : userInfo,\r\n            });\r\n            let msg      = this.state.chatDetail.messages;\r\n            let chatlist = this.state.chatUser.chatList;\r\n            console.log(\"chatId\",chatlist);\r\n            if(chatlist  && chatlist != null){\r\n                chatlist.map((item)=>{\r\n                    if(item['contactId']==userId){\r\n                        this.setState({\r\n                            chatId : item['chatId'],\r\n                        });\r\n\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        const {classes, contacts, user, searchText, selectedContactIds, selectAllContacts, deSelectAllContacts, toggleInSelectedContacts, removeContacts, removeContact, toggleStarredContact, setContactsUnstarred, setContactsStarred,state, openChat} = this.props;\r\n        const data = this.getFilteredArray(contacts, searchText);\r\n        const {selectedContactsMenu} = this.state;\r\n        // console.log(\"chatDetal====\",this.state.chatDetail);\r\n        if ( !data && data.length === 0 )\r\n        {\r\n            return (\r\n                <div className=\"flex items-center justify-center h-full\">\r\n                    <Typography color=\"textSecondary\" variant=\"h5\">\r\n                        There are no contacts!\r\n                    </Typography>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n            <FuseAnimate animation=\"transition.slideUpIn\" delay={300}>\r\n                <ReactTable\r\n                    className={classNames(classes.root, \"-striped -highlight border-0\")}\r\n                    getTrProps={(state, rowInfo, column) => {\r\n                        return {\r\n                            onClick: (e)=>{\r\n                                e.stopPropagation();\r\n                                // this.openChat();\r\n                                console.log(\"rowinfo\",rowInfo);\r\n                                openChat(rowInfo.original.id);\r\n                                this.getMsgInfo(rowInfo.original.name,rowInfo.original);\r\n                            },\r\n                            className: \"cursor-pointer\",\r\n\r\n                        }\r\n                    }}\r\n                    data={data}\r\n                    columns={[\r\n                        {\r\n                            Header   : () => (\r\n                                <Checkbox\r\n                                    onClick={(event) => {\r\n                                        event.stopPropagation();\r\n                                    }}\r\n                                    onChange={(event) => {\r\n                                        event.target.checked ? selectAllContacts() : deSelectAllContacts();\r\n                                    }}\r\n                                    checked={selectedContactIds.length === Object.keys(contacts).length && selectedContactIds.length > 0}\r\n                                    indeterminate={selectedContactIds.length !== Object.keys(contacts).length && selectedContactIds.length > 0}\r\n                                />\r\n                            ),\r\n                            accessor : \"\",\r\n                            Cell     : row => {\r\n                                return (<Checkbox\r\n                                        onClick={(event) => {\r\n                                            event.stopPropagation();\r\n                                        }}\r\n                                        checked={selectedContactIds.includes(row.value.id)}\r\n                                        onChange={() => toggleInSelectedContacts(row.value.id)}\r\n                                    />\r\n                                )\r\n                            },\r\n                            className: \"justify-center\",\r\n                            sortable : false,\r\n                            width    : 64\r\n                        },\r\n                        {\r\n                            Header   : () => (\r\n                                selectedContactIds.length > 0 && (\r\n                                    <React.Fragment>\r\n                                        <IconButton\r\n                                            aria-owns={selectedContactsMenu ? 'selectedContactsMenu' : null}\r\n                                            aria-haspopup=\"true\"\r\n                                            onClick={this.openSelectedContactMenu}\r\n                                        >\r\n                                            <Icon>more_horiz</Icon>\r\n                                        </IconButton>\r\n                                        <Menu\r\n                                            id=\"selectedContactsMenu\"\r\n                                            anchorEl={selectedContactsMenu}\r\n                                            open={Boolean(selectedContactsMenu)}\r\n                                            onClose={this.closeSelectedContactsMenu}\r\n                                        >\r\n                                            <MenuList>\r\n                                                <MenuItem\r\n                                                    onClick={() => {\r\n                                                        removeContacts(selectedContactIds);\r\n                                                        this.closeSelectedContactsMenu();\r\n                                                    }}\r\n                                                >\r\n                                                    <ListItemIcon className={classes.icon}>\r\n                                                        <Icon>delete</Icon>\r\n                                                    </ListItemIcon>\r\n                                                    <ListItemText inset primary=\"Remove\"/>\r\n                                                </MenuItem>\r\n                                                <MenuItem\r\n                                                    onClick={() => {\r\n                                                        setContactsStarred(selectedContactIds);\r\n                                                        this.closeSelectedContactsMenu();\r\n                                                    }}\r\n                                                >\r\n                                                    <ListItemIcon className={classes.icon}>\r\n                                                        <Icon>star</Icon>\r\n                                                    </ListItemIcon>\r\n                                                    <ListItemText inset primary=\"Starred\"/>\r\n                                                </MenuItem>\r\n                                                <MenuItem\r\n                                                    onClick={() => {\r\n                                                        setContactsUnstarred(selectedContactIds);\r\n                                                        this.closeSelectedContactsMenu();\r\n                                                    }}\r\n                                                >\r\n                                                    <ListItemIcon className={classes.icon}>\r\n                                                        <Icon>star_border</Icon>\r\n                                                    </ListItemIcon>\r\n                                                    <ListItemText inset primary=\"Unstarred\"/>\r\n                                                </MenuItem>\r\n                                            </MenuList>\r\n                                        </Menu>\r\n                                    </React.Fragment>\r\n                                )\r\n                            ),\r\n                            accessor : \"avatar\",\r\n                            Cell     : row => (\r\n                                <Avatar className=\"mr-8\" alt={row.original.name} src={row.value}/>\r\n                            ),\r\n                            className: \"justify-center\",\r\n                            width    : 64,\r\n                            sortable : false\r\n                        },\r\n                        {\r\n                            Header    : \"First Name\",\r\n                            accessor  : \"name\",\r\n                            filterable: true,\r\n                            className : \"font-bold\",\r\n                            width    : 200,\r\n                        },\r\n                        {\r\n                            Header    : \"Last Name\",\r\n                            accessor  : \"lastName\",\r\n                            filterable: true,\r\n                            className : \"font-bold\",\r\n                            width    : 150,\r\n                        },\r\n                     /*    {\r\n                            Header    : \"Company\",\r\n                            accessor  : \"company\",\r\n                            filterable: true\r\n                        }, */\r\n                        /* {\r\n                            Header    : \"Job Title\",\r\n                            accessor  : \"jobTitle\",\r\n                            filterable: true\r\n                        }, */\r\n                        {\r\n                            Header    : \"Email\",\r\n                            accessor  : \"email\",\r\n                            filterable: true,\r\n                            width    : 300,\r\n                        },\r\n                        {\r\n                            Header    : \"Phone\",\r\n                            accessor  : \"phone\",\r\n                            filterable: true\r\n                        },\r\n                        {\r\n                            Header: \"\",\r\n                            width : 128,\r\n                            Cell  : row => (\r\n                                <div className=\"flex items-center\">\r\n                                    <IconButton\r\n                                        onClick={(ev) => {\r\n                                            ev.stopPropagation();\r\n                                            toggleStarredContact(row.original.id)\r\n                                        }}\r\n                                        className={classes.chatIcon}\r\n                                    >\r\n                                        {user.starred && user.starred.includes(row.original.id) ? (\r\n                                            <Icon>star</Icon>\r\n                                        ) : (\r\n                                            <Icon>star_border</Icon>\r\n                                        )}\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={(ev) => {\r\n                                            ev.stopPropagation();\r\n                                            removeContact(row.original.id);\r\n                                        }}\r\n                                        className={classes.chatIcon}\r\n                                    >\r\n                                        <Icon>delete</Icon>\r\n                                       \r\n                                    </IconButton>\r\n\r\n                                    <IconButton\r\n                                        onClick={(ev) => {\r\n                                            ev.stopPropagation();\r\n                                            openChat(row.original.id);\r\n                                        }}\r\n                                        className={classes.chatIcon}\r\n                                    >\r\n                                        <Icon>chat</Icon>\r\n                                    </IconButton>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    ]}\r\n                    defaultPageSize={10}\r\n                    noDataText=\"No contacts found\"\r\n                />\r\n\r\n            </FuseAnimate>\r\n\r\n                {this.state.isOpen && !1 && (\r\n                    <div className={classNames(classes.individualChat, {'closeIndvidualchat': !state})}>\r\n                        {\r\n\r\n                            <IndividualChat show ={this.state.isOpen} onClose={this.toggleChat}\r\n                            message ={this.state.individualchatDetail} userdetail = {this.state.selectedUserDetail}\r\n                                            currentUser ={this.state.chatDetail.currentUser}\r\n                                            contacts ={this.state.contacts} user={this.state.chatUser}\r\n                                            currentRoom={this.state.currentRoom}\r\n                            />\r\n\r\n                        }\r\n\r\n                    </div>\r\n                )}\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapDispatchToProps(dispatch)\r\n{\r\n    return bindActionCreators({\r\n        getContacts             : Actions.getContacts,\r\n        getUserData             : Actions.getUserData,\r\n        toggleInSelectedContacts: Actions.toggleInSelectedContacts,\r\n        selectAllContacts       : Actions.selectAllContacts,\r\n        deSelectAllContacts     : Actions.deSelectAllContacts,\r\n        openEditContactDialog   : Actions.openEditContactDialog,\r\n        removeContacts          : Actions.removeContacts,\r\n        openChat                : Actions.openChat,\r\n        removeContact           : Actions.removeContact,\r\n        toggleStarredContact    : Actions.toggleStarredContact,\r\n        toggleStarredContacts   : Actions.toggleStarredContacts,\r\n        setContactsStarred      : Actions.setContactsStarred,\r\n        setContactsUnstarred    : Actions.setContactsUnstarred,\r\n        individualcurrentChat   : ChatActions.IndividualsetCurrentRoom,\r\n        openChatPanel           : ChatActions.openChatPanel,\r\n        closeChatPanel          : ChatActions.closeChatPanel\r\n    }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps({contactsApp,chatPanel})\r\n{\r\n    return {\r\n        contacts                   : contactsApp.contacts.entities,\r\n        selectedContactIds         : contactsApp.contacts.selectedContactIds,\r\n        searchText                 : contactsApp.contacts.searchText,\r\n        user                       : contactsApp.user,\r\n        // contacts                : chatPanel.contacts.entities,\r\n        selectedContactId          : chatPanel.contacts.selectedContactId,\r\n        state                      : chatPanel.state,\r\n        chatDetail                 : chatPanel.chat,\r\n        chatUser                   : chatPanel.user,\r\n        currentRoom                : chatPanel.chat.currentRoom,\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsList)));\r\n","import React, {Component} from 'react';\r\nimport {MuiThemeProvider, withStyles} from '@material-ui/core/styles/index';\r\nimport {Hidden, Icon, IconButton, Input, Paper, Typography} from '@material-ui/core';\r\nimport * as Actions from './store/actions';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport classNames from 'classnames';\r\nimport {FuseAnimate, FuseSelectedTheme} from '@fuse';\r\n\r\nconst styles = theme => ({\r\n    root: {}\r\n});\r\n\r\nclass ContactsHeader extends Component {\r\n\r\n    render()\r\n    {\r\n        const {classes, setSearchText, searchText, pageLayout} = this.props;\r\n        return (\r\n            <div className={classNames(classes.root, \"flex flex-1 items-center justify-between p-8 sm:p-24\")}>\r\n\r\n                <div className=\"flex flex-shrink items-center sm:w-224\">\r\n                    <Hidden lgUp>\r\n                        <IconButton\r\n                            onClick={(ev) => pageLayout().toggleLeftSidebar()}\r\n                            aria-label=\"open left sidebar\"\r\n                        >\r\n                            <Icon>menu</Icon>\r\n                        </IconButton>\r\n                    </Hidden>\r\n\r\n                    <div className=\"flex items-center\">\r\n                        <FuseAnimate animation=\"transition.expandIn\" delay={300}>\r\n                            <Icon className=\"text-32 mr-12\">account_box</Icon>\r\n                        </FuseAnimate>\r\n                        <FuseAnimate animation=\"transition.slideLeftIn\" delay={300}>\r\n                            <Typography variant=\"h6\" className=\"hidden sm:flex\">Contacts</Typography>\r\n                        </FuseAnimate>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex flex-1 items-center justify-center pr-8 sm:px-12\">\r\n\r\n                    <MuiThemeProvider theme={FuseSelectedTheme}>\r\n                        <FuseAnimate animation=\"transition.slideLeftIn\" delay={300}>\r\n                            <Paper className=\"flex p-4 items-center w-full max-w-512 px-8 py-4\" elevation={1}>\r\n\r\n                                <Icon className=\"mr-8\" color=\"action\">search</Icon>\r\n\r\n                                <Input\r\n                                    placeholder=\"Search for anything\"\r\n                                    className=\"flex flex-1\"\r\n                                    disableUnderline\r\n                                    fullWidth\r\n                                    value={searchText}\r\n                                    inputProps={{\r\n                                        'aria-label': 'Search'\r\n                                    }}\r\n                                    onChange={setSearchText}\r\n                                />\r\n                            </Paper>\r\n                        </FuseAnimate>\r\n                    </MuiThemeProvider>\r\n                </div>\r\n            </div>\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch)\r\n{\r\n    return bindActionCreators({\r\n        setSearchText: Actions.setSearchText\r\n    }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps({contactsApp})\r\n{\r\n    return {\r\n        searchText: contactsApp.contacts.searchText\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ContactsHeader));\r\n","import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles/index';\r\nimport {Avatar, Divider, Icon, List, ListItem, ListItemText, Paper, Typography} from '@material-ui/core';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {NavLink, withRouter} from 'react-router-dom';\r\nimport {FuseAnimate} from '@fuse';\r\n\r\nconst styles = theme => ({\r\n    listItem: {\r\n        color         : 'inherit!important',\r\n        textDecoration: 'none!important',\r\n        height        : 40,\r\n        width         : 'calc(100% - 16px)',\r\n        borderRadius  : '0 20px 20px 0',\r\n        paddingLeft   : 24,\r\n        paddingRight  : 12,\r\n        '&.active'    : {\r\n            backgroundColor    : theme.palette.secondary.main,\r\n            color              : theme.palette.secondary.contrastText + '!important',\r\n            pointerEvents      : 'none',\r\n            '& .list-item-icon': {\r\n                color: 'inherit'\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nclass ContactsSidebarContent extends Component {\r\n\r\n    render()\r\n    {\r\n        const {classes, user} = this.props;\r\n        return (\r\n            <div className=\"p-16 lg:p-24 lg:pr-4\">\r\n                <FuseAnimate animation=\"transition.slideLeftIn\" delay={200}>\r\n                    <Paper elevation={1} className=\"rounded-8\">\r\n                        <div className=\"p-24 flex items-center\">\r\n                            <Avatar className=\"mr-12\" alt={user.name} src={user.avatar}/>\r\n                            <Typography>{user.name}</Typography>\r\n                        </div>\r\n                        <Divider/>\r\n                        <List>\r\n                            <ListItem\r\n                                button\r\n                                component={NavLink}\r\n                                to={'/apps/contacts/all'}\r\n                                activeClassName=\"active\"\r\n                                className={classes.listItem}\r\n                            >\r\n                                <Icon className=\"list-item-icon text-16\" color=\"action\">people</Icon>\r\n                                <ListItemText className=\"truncate pr-0\" primary=\"All contacts\" disableTypography={true}/>\r\n                            </ListItem>\r\n                            <ListItem\r\n                                button\r\n                                component={NavLink}\r\n                                to={'/apps/contacts/frequent'}\r\n                                activeClassName=\"active\"\r\n                                className={classes.listItem}\r\n                            >\r\n                                <Icon className=\"list-item-icon text-16\" color=\"action\">restore</Icon>\r\n                                <ListItemText className=\"truncate pr-0\" primary=\"Frequently contacted\" disableTypography={true}/>\r\n                            </ListItem>\r\n                            <ListItem\r\n                                button\r\n                                component={NavLink}\r\n                                to={'/apps/contacts/starred'}\r\n                                activeClassName=\"active\"\r\n                                className={classes.listItem}\r\n                            >\r\n                                <Icon className=\"list-item-icon text-16\" color=\"action\">star</Icon>\r\n                                <ListItemText className=\"truncate pr-0\" primary=\"Starred contacts\" disableTypography={true}/>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Paper>\r\n                </FuseAnimate>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch)\r\n{\r\n    return bindActionCreators({}, dispatch);\r\n}\r\n\r\nfunction mapStateToProps({contactsApp})\r\n{\r\n    return {\r\n        user: contactsApp.user\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsSidebarContent)));\r\n","import React, {Component} from 'react';\r\nimport {\r\n    TextField, Button, Dialog, DialogActions, DialogContent, Icon, IconButton, Typography, Toolbar, AppBar, Avatar\r\n} from '@material-ui/core';\r\nimport {withStyles} from '@material-ui/core/styles/index';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as Actions from './store/actions';\r\nimport {connect} from 'react-redux';\r\nimport _ from '@lodash';\r\n\r\nconst styles = theme => ({\r\n    root       : {},\r\n    formControl: {\r\n        marginBottom: 24\r\n    }\r\n});\r\nconst newContactState = {\r\n    id      : '',\r\n    name    : '',\r\n    lastName: '',\r\n    avatar  : 'assets/images/avatars/profile.jpg',\r\n    nickname: '',\r\n    company : '',\r\n    jobTitle: '',\r\n    email   : '',\r\n    phone   : '',\r\n    address : '',\r\n    birthday: '',\r\n    notes   : ''\r\n};\r\n\r\nclass ContactDialog extends Component {\r\n    state = {...newContactState};\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot)\r\n    {\r\n        /**\r\n         * After Dialog Open\r\n         */\r\n        if ( !prevProps.contactDialog.props.open && this.props.contactDialog.props.open )\r\n        {\r\n            /**\r\n             * Dialog type: 'create'\r\n             * Update State\r\n             */\r\n            if ( this.props.contactDialog.type === 'create' &&\r\n                this.props.contactDialog.data &&\r\n                !_.isEqual(this.props.contactDialog.data, prevState) )\r\n            {\r\n                this.setState({...this.props.contactDialog.data});\r\n            }\r\n\r\n            /**\r\n             * Dialog type: 'new'\r\n             * Update State\r\n             */\r\n            if ( this.props.contactDialog.type === 'new' &&\r\n                !_.isEqual(newContactState, prevState) )\r\n            {\r\n                this.setState({...newContactState});\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState(_.set({...this.state}, event.target.name, event.target.type === 'checkbox' ? event.target.checked : event.target.value));\r\n    };\r\n\r\n    closeComposeDialog = () => {\r\n        this.props.contactDialog.type === 'create' ? this.props.closeEditContactDialog() : this.props.closeNewContactDialog();\r\n    };\r\n\r\n    canBeSubmitted()\r\n    {\r\n        const {name} = this.state;\r\n        return (\r\n            name.length > 0\r\n        );\r\n    }\r\n\r\n    render()\r\n    {\r\n        const {classes, contactDialog, addContact, updateContact, removeContact} = this.props;\r\n\r\n        return (\r\n            <Dialog\r\n                classes={{\r\n                    root : classes.root,\r\n                    paper: \"m-24\"\r\n                }}\r\n                className={classes.root}\r\n                {...contactDialog.props}\r\n                onClose={this.closeComposeDialog}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n\r\n                <AppBar position=\"static\" elevation={1}>\r\n                    <Toolbar className=\"flex w-full\">\r\n                        <Typography variant=\"subtitle1\" color=\"inherit\">\r\n                            {contactDialog.type === 'new' ? 'New Contact' : 'Edit Contact'}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                    <div className=\"flex flex-col items-center justify-center pb-24\">\r\n                        <Avatar className=\"w-96 h-96\" alt=\"contact avatar\" src={this.state.avatar}/>\r\n                        {contactDialog.type === 'create' && (\r\n                            <Typography variant=\"h6\" color=\"inherit\" className=\"pt-8\">\r\n                                {this.state.name}\r\n                            </Typography>\r\n                        )}\r\n                    </div>\r\n                </AppBar>\r\n\r\n                <DialogContent classes={{root: \"p-24\"}}>\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">account_circle</Icon>\r\n                        </div>\r\n\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Name\"\r\n                            autoFocus\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            required\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Last name\"\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            value={this.state.lastName}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">star</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Nickname\"\r\n                            id=\"nickname\"\r\n                            name=\"nickname\"\r\n                            value={this.state.nickname}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">phone</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Phone\"\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={this.state.phone}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">email</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">domain</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Company\"\r\n                            id=\"company\"\r\n                            name=\"company\"\r\n                            value={this.state.company}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">work</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Job title\"\r\n                            id=\"jobTitle\"\r\n                            name=\"jobTitle\"\r\n                            value={this.state.jobTitle}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">cake</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            id=\"birthday\"\r\n                            label=\"Birthday\"\r\n                            type=\"date\"\r\n                            value={this.state.birthday}\r\n                            onChange={this.handleChange}\r\n                            InputLabelProps={{\r\n                                shrink: true\r\n                            }}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">home</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Address\"\r\n                            id=\"address\"\r\n                            name=\"address\"\r\n                            value={this.state.address}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex\">\r\n                        <div className=\"min-w-48 pt-20\">\r\n                            <Icon color=\"action\">note</Icon>\r\n                        </div>\r\n                        <TextField\r\n                            className={classes.formControl}\r\n                            label=\"Notes\"\r\n                            id=\"notes\"\r\n                            name=\"notes\"\r\n                            value={this.state.notes}\r\n                            onChange={this.handleChange}\r\n                            variant=\"outlined\"\r\n                            multiline\r\n                            rows={5}\r\n                            fullWidth\r\n                        />\r\n                    </div>\r\n                </DialogContent>\r\n\r\n                {contactDialog.type === 'new' ? (\r\n                    <DialogActions className=\"justify-between pl-16\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                addContact(this.state);\r\n                                this.closeComposeDialog();\r\n                            }}\r\n                            disabled={!this.canBeSubmitted()}\r\n                        >\r\n                            Add\r\n                        </Button>\r\n                    </DialogActions>\r\n                ) : (\r\n                    <DialogActions className=\"justify-between pl-16\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => {\r\n                                updateContact(this.state);\r\n                                this.closeComposeDialog();\r\n                            }}\r\n                            disabled={!this.canBeSubmitted()}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                removeContact(this.state.id);\r\n                                this.closeComposeDialog();\r\n                            }}\r\n                        >\r\n                            <Icon>delete</Icon>\r\n                        </IconButton>\r\n                    </DialogActions>\r\n                )}\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapDispatchToProps(dispatch)\r\n{\r\n    return bindActionCreators({\r\n        closeEditContactDialog: Actions.closeEditContactDialog,\r\n        closeNewContactDialog : Actions.closeNewContactDialog,\r\n        addContact            : Actions.addContact,\r\n        updateContact         : Actions.updateContact,\r\n        removeContact         : Actions.removeContact\r\n    }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps({contactsApp})\r\n{\r\n    return {\r\n        contactDialog: contactsApp.contacts.contactDialog\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles, {withTheme: true})(connect(mapStateToProps, mapDispatchToProps)(ContactDialog));\r\n","import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {FusePageSimple, FuseAnimate} from '@fuse';\r\nimport {bindActionCreators} from 'redux';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport * as Actions from './store/actions';\r\nimport ContactsList from 'main/content/apps/contacts/ContactsList';\r\nimport ContactsHeader from 'main/content/apps/contacts/ContactsHeader';\r\nimport ContactsSidebarContent from 'main/content/apps/contacts/ContactsSidebarContent';\r\nimport _ from '@lodash';\r\nimport {Fab, Icon} from '@material-ui/core';\r\nimport ContactDialog from 'main/content/apps/contacts/ContactDialog';\r\n\r\nconst styles = theme => ({\r\n    addButton: {\r\n        position: 'fixed',\r\n        left   : 453,\r\n        bottom  : 90,\r\n        zIndex  : 99\r\n    }\r\n});\r\n\r\nclass ContactsApp extends Component {\r\n\r\n    componentDidMount()\r\n    {\r\n        this.props.getContacts(this.props.match.params);\r\n        this.props.getUserData();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState)\r\n    {\r\n        if ( !_.isEqual(this.props.location, prevProps.location) )\r\n        {\r\n            this.props.getContacts(this.props.match.params);\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const {classes, openNewContactDialog} = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <FusePageSimple\r\n                    classes={{\r\n                        contentCardWrapper: \"p-16 sm:p-24 pb-80\",\r\n                        leftSidebar       : \"w-256\",\r\n                        header            : \"min-h-72 h-72 sm:h-136 sm:min-h-136\"\r\n                    }}\r\n                    header={\r\n                        <ContactsHeader pageLayout={() => this.pageLayout}/>\r\n                    }\r\n                    content={\r\n                        <ContactsList/>\r\n                    }\r\n                    leftSidebarContent={\r\n                        <ContactsSidebarContent/>\r\n                    }\r\n                    sidebarInner\r\n                    onRef={instance => {\r\n                        this.pageLayout = instance;\r\n                    }}\r\n                    innerScroll\r\n                />\r\n                <FuseAnimate animation=\"transition.expandIn\" delay={300}>\r\n                    <Fab\r\n                        color=\"primary\"\r\n                        aria-label=\"add\"\r\n                        className={classes.addButton}\r\n                        onClick={openNewContactDialog}\r\n                    >\r\n                        <Icon>person_add</Icon>\r\n                    </Fab>\r\n                </FuseAnimate>\r\n                <ContactDialog/>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch)\r\n{\r\n    return bindActionCreators({\r\n        getContacts         : Actions.getContacts,\r\n        getUserData         : Actions.getUserData,\r\n        openNewContactDialog: Actions.openNewContactDialog\r\n    }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps({contactsApp})\r\n{\r\n    return {\r\n        contacts          : contactsApp.contacts.entities,\r\n        selectedContactIds: contactsApp.contacts.selectedContactIds,\r\n        searchText        : contactsApp.contacts.searchText,\r\n        user              : contactsApp.user\r\n    }\r\n}\r\n\r\nexport default (withStyles(styles, {withTheme: true})(withRouter(connect(mapStateToProps, mapDispatchToProps)(ContactsApp))));\r\n"],"sourceRoot":""}